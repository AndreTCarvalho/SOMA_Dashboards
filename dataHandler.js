/////////////////////////////////////////////////////////////
//                 Do Not Edit This File!!!                //
//                 Edit screenHandler.js                   //
/////////////////////////////////////////////////////////////



export class DataHandler {
  constructor(dataSourceNames = []) {
    this._dataSourceNames = dataSourceNames;
    this._data = dataSourceNames.map(dSName => ({
      dataSourceName: dSName,
      type: null,
      data: null,
      unit: null,
      digitsOfPrecision: null,
      alarm: null,
      timestamp: null
    }));
  }

  getDataSourceNames() {
    return this._tags;
  }


  updateData(newDataObject) {

    // --- Handling the 'dataSourceName' field ---
    if (!newDataObject || typeof newDataObject.dataSourceName === 'undefined') {
      console.error("Error: Invalid data object. Use the structure {dataSourceName: string, type: string, data: any, alarm: number, dateTime: Date|string}");
      return false;
    }

    // --- Handling the 'alarm' field ---
    if (typeof newDataObject.alarm !== 'undefined') {
      newDataObject.alarm = parseInt(newDataObject.alarm, 10);
      if (isNaN(newDataObject.alarm)) {
        console.warn(`Warning: The 'alarm' value for TAG '${newDataObject.dataSourceName}' is not a valid number and was set to 0. Consider a numeric value.`);
        newDataObject.alarm = 0;
      }
    }

    // --- Handling the 'timestamp' field  ---
    if (typeof newDataObject.timestamp !== 'undefined') {
      // If it's already a Date object, use it. If it's a string/number, try to convert.
      if (!(newDataObject.timestamp instanceof Date)) {
        const parsedDate = new Date(newDataObject.timestamp);
        if (isNaN(parsedDate.getTime())) { // Check if the date is valid
          console.warn(`Warning: The 'timestamp' value for TAG '${newDataObject.dataSourceName}' is not a valid date/time format and was set to 'Invalid Date'. Consider a valid format.`);
          newDataObject.timestamp = new Date('Invalid Date'); // Set an invalid Date object
        } else {
          newDataObject.timestamp = parsedDate;
        }
      }
    }

    const index = this._data.findIndex(item => item.dataSourceName === newDataObject.dataSourceName);
    if (index !== -1) {
      // Update the existing object
      this._data[index] = { ...this._data[index], ...newDataObject };
      console.log(`Data for TAG '${newDataObject.dataSourceName}' updated.`);
      this.updateScreen(); // Call the screen update function
      return true;
    } else {
      console.log(`Data received, but Data Source '${newDataObject.dataSourceName}' was not recognized.`);
      return false;
    }
  }

  getAllData() {
    return this._data;
  }

  getDataByDataSourceName(name) {
    return this._data.find(item => item.dataSourceName === name);
  }
}